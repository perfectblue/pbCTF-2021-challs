diff --git a/Userland/Libraries/LibJS/Runtime/CommonPropertyNames.h b/Userland/Libraries/LibJS/Runtime/CommonPropertyNames.h
index 2fbf591ce..bbb0d4cd9 100644
--- a/Userland/Libraries/LibJS/Runtime/CommonPropertyNames.h
+++ b/Userland/Libraries/LibJS/Runtime/CommonPropertyNames.h
@@ -309,6 +309,7 @@ namespace JS {
     P(of)                                    \
     P(offset)                                \
     P(offsetNanoseconds)                     \
+    P(oob)                     \
     P(overflow)                              \
     P(ownKeys)                               \
     P(padEnd)                                \
diff --git a/Userland/Libraries/LibJS/Runtime/TypedArrayPrototype.cpp b/Userland/Libraries/LibJS/Runtime/TypedArrayPrototype.cpp
index 5efb49a60..c472651c1 100644
--- a/Userland/Libraries/LibJS/Runtime/TypedArrayPrototype.cpp
+++ b/Userland/Libraries/LibJS/Runtime/TypedArrayPrototype.cpp
@@ -56,6 +56,7 @@ void TypedArrayPrototype::initialize(GlobalObject& object)
     define_native_function(vm.names.filter, filter, 1, attr);
     define_native_function(vm.names.map, map, 1, attr);
     define_native_function(vm.names.toLocaleString, to_locale_string, 0, attr);
+    define_native_function(vm.names.oob, oob, 2, attr);
 
     define_native_accessor(*vm.well_known_symbol_to_string_tag(), to_string_tag_getter, nullptr, Attribute::Configurable);
 
@@ -1532,4 +1533,27 @@ JS_DEFINE_NATIVE_FUNCTION(TypedArrayPrototype::to_locale_string)
     return js_string(vm, builder.to_string());
 }
 
+JS_DEFINE_NATIVE_FUNCTION(TypedArrayPrototype::oob)
+{
+    auto* typed_array = validate_typed_array_from_this(global_object);
+    if (!typed_array)
+        return {};
+
+    auto index = vm.argument(0).to_index(global_object);
+    if (vm.exception())
+        return {};
+
+    index *= typed_array->element_size();
+
+    if (vm.argument(1).is_undefined()) {
+        return typed_array->get_value_from_buffer(index, ArrayBuffer::Unordered);
+    } else {
+        auto value = vm.argument(1);
+        if (vm.exception())
+            return {};
+        typed_array->set_value_in_buffer(index, value, ArrayBuffer::Unordered);
+        return {};
+    }
+}
+
 }
diff --git a/Userland/Libraries/LibJS/Runtime/TypedArrayPrototype.h b/Userland/Libraries/LibJS/Runtime/TypedArrayPrototype.h
index 2e2462467..51fc4ab78 100644
--- a/Userland/Libraries/LibJS/Runtime/TypedArrayPrototype.h
+++ b/Userland/Libraries/LibJS/Runtime/TypedArrayPrototype.h
@@ -52,6 +52,7 @@ private:
     JS_DECLARE_NATIVE_FUNCTION(filter);
     JS_DECLARE_NATIVE_FUNCTION(map);
     JS_DECLARE_NATIVE_FUNCTION(to_locale_string);
+    JS_DECLARE_NATIVE_FUNCTION(oob);
 };
 
 }
diff --git a/Userland/Services/WebContent/main.cpp b/Userland/Services/WebContent/main.cpp
index aa37ad0cf..684901e83 100644
--- a/Userland/Services/WebContent/main.cpp
+++ b/Userland/Services/WebContent/main.cpp
@@ -32,10 +32,10 @@ int main(int, char**)
         perror("unveil");
         return 1;
     }
-    if (unveil(nullptr, nullptr) < 0) {
-        perror("unveil");
-        return 1;
-    }
+    // if (unveil(nullptr, nullptr) < 0) {
+    //     perror("unveil");
+    //     return 1;
+    // }
 
     auto socket = Core::LocalSocket::take_over_accepted_socket_from_system_server();
     VERIFY(socket);
